<?xml version="1.0" encoding="UTF-8"?>
<Component extClass="Ext.form.NumberField" extends="Ext.form.TextField" category="Form" label="NumberField" xtype="numberfield">
	<Properties>
		<Property name="allowDecimals" type="Boolean" comment="False to disallow decimal values (defaults to true)" />
		<Property name="allowNegative" type="Boolean" comment="False to prevent entering a negative sign (defaults to true)" />
		<Property name="baseChars" type="String" comment="The base set of characters to evaluate as valid numbers (defaults to '0123456789')." />
		<Property name="decimalPrecision" type="Number" comment="The maximum precision to display after the decimal separator (defaults to 2)" />
		<Property name="decimalSeparator" type="String" comment="Character(s) to allow as the decimal separator (defaults to '.')" />
		<Property name="fieldClass" type="String" comment="The default CSS class for the field (defaults to 'x-form-field x-form-num-field')" />
		<Property name="maxText" type="String" comment="Error text to display if the maximum value validation fails (defaults to 'The maximum value for this field is {maxValue}')" />
		<Property name="maxValue" type="Number" comment="The maximum allowed value (defaults to Number.MAX_VALUE)" />
		<Property name="minText" type="String" comment="Error text to display if the minimum value validation fails (defaults to 'The minimum value for this field is {minValue}')" />
		<Property name="minValue" type="Number" comment="The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)" />
		<Property name="nanText" type="String" comment="Error text to display if the value is not a valid number.  For example, this can happen if a valid character like '.' or '-' is left in the field with no number (defaults to '{value} is not a valid number')" />
	</Properties>
	<Events>
	</Events>
</Component>
