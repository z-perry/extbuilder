<?xml version="1.0" encoding="UTF-8"?>
<Component extClass="Ext.Component" extends="Ext.util.Observable" xtype="component">
	<Properties>
		<Property name="allowDomMove"  type="Boolean" advanced="true" comment="Whether the component can move the Dom node when rendering (defaults to true)." />
		<Property name="applyTo" type="Mixed" advanced="true" comment="The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component.  When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required.  If applyTo is specified, any value passed for {@link #renderTo} will be ignored and the target element's parent node will automatically be used as the component's container." />
		<Property name="autoEl" type="String/Object" advanced="true" comment="A tag name or DomHelper spec to create an element with. This is intended to create shorthand utility components inline via JSON. It should not be used for higher level components which already create their own elements." />
		<Property name="autoShow" type="Boolean" advanced="true" comment="True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false)." />
		<Property name="cls" type="String" advanced="true" comment="An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be useful for adding customized styles to the component or any of its children using standard CSS rules." />
		<Property name="ctCls" type="String" advanced="true" comment="An optional extra CSS class that will be added to this component's container (defaults to '').  This can be useful for adding customized styles to the container or any of its children using standard CSS rules." />
		<Property name="disabled" type="Boolean" advanced="true" comment="Render this component disabled (default is false)." />
		<Property name="disabledClass" type="String" advanced="true" comment="CSS class added to the component when it is disabled (defaults to 'x-item-disabled')." />
		<Property name="hidden" type="Boolean" advanced="true" comment="Render this component hidden (default is false)." />
		<Property name="hideMode" type="String" advanced="true" comment="How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'." />
		<Property name="hideParent" type="Boolean" advanced="true" comment="True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container." />
		<Property name="id" type="String" comment="The unique id of this component (defaults to an auto-assigned id)." />
		<Property name="overCls" type="String" advanced="true" comment="An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element, and removed when the mouse moves out. (defaults to '').  This can be useful for adding customized 'active' or 'hover' styles to the component or any of its children using standard CSS rules." />
		<Property name="plugins" type="Object/Array" advanced="true" comment="An object or array of objects that will provide custom functionality for this component.  The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the component as needed to provide its functionality." />
		<Property name="renderTo" type="String" advanced="true" comment="The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required." />
		<Property name="region" type="Combox" values=" ,center,west,east,north,south" />
		<Property name="columnWidth" type="String"  />
		<Property name="stateEvents" type="Array" advanced="true" comment="An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events." />
		<Property name="style" type="String" advanced="true" comment="A custom style specification to be applied to this component's Element.  Should be a valid argument to {@link Ext.Element#applyStyles}." />
	</Properties>
	<Events>
		<Event name="beforedestroy" comment="Fires before the component is destroyed. Return false to stop the destroy." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="beforehide" comment="Fires before the component is hidden. Return false to stop the hide." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="beforerender" comment="Fires before the component is rendered. Return false to stop the render." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="beforeshow" comment="Fires before the component is shown. Return false to stop the show." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="beforestaterestore" comment="Fires before the state of the component is restored. Return false to stop the restore." >
			<Param name="this" type="Ext.Component" />
			<Param name="state" type="Object" comment="The hash of state values" />
		</Event>
		<Event name="beforestatesave" comment="Fires before the state of the component is saved to the configured state provider. Return false to stop the save." >
			<Param name="this" type="Ext.Component" />
			<Param name="state" type="Object" comment="The hash of state values" />
		</Event>
		<Event name="destroy" comment="Fires after the component is destroyed." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="disable" comment="Fires after the component is disabled." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="enable" comment="Fires after the component is enabled." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="hide" comment="Fires after the component is hidden." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="render" comment="Fires after the component is rendered." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="show" comment="Fires after the component is shown." >
			<Param name="this" type="Ext.Component" />
		</Event>
		<Event name="staterestore" comment="Fires after the state of the component is restored." >
			<Param name="this" type="Ext.Component" />
			<Param name="state" type="Object" comment="The hash of state values" />
		</Event>
		<Event name="statesave" comment="Fires after the state of the component is saved to the configured state provider." >
			<Param name="this" type="Ext.Component" />
			<Param name="state" type="Object" comment="The hash of state values" />
		</Event>
	</Events>
</Component>
